<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Leaf Html Gridview class
 *
 * @package    Html

 * @copyright  (c) 2010
 */
class Leafx2_Html_Gridview {
    
    // ****************************************************
    // PUBLIC attributes **********************************
    // ****************************************************
    
    // num of displayed rows in one page
    public  $displayed_rows = 25;
    // flag displaying all row item data
    public  $is_display_all_rows = false;
    // flag displaying html table header
    public  $is_display_header = true;
    // flag displaying html table pagination links
    public  $is_display_links = true;
    // start index of data
    public $start;
    // end index of data
    public $end;
    
    // ****************************************************
    // PROTECTED attributes *******************************
    // ****************************************************
    
    // table headers container
    protected $headers = array();
    // table rows container
    protected $rows = array();
    // table rows information
    protected $rowsinfo = array();
    // total rows that fetched
    public $total_rows;
    // grid name
    protected $name;
    // current grid pag
    protected $page;
    // maximum page of this grid
    protected $maxpage;


    /**
     * gridview contructor
     * @param string name of the gridview
     * @return void
     */
    public function __construct($name) {
        $this->name = $name;
    }
    
    /**
     * add header -- this function just for "backward" compatibility, use add_header instead
     * @param array header
     * @return void
     */
    public function set_header($header) {
        $this->headers[] = $header;
    }
    
    /**
     * add header
     * @param array header
     * @return void
     */
    public function add_header($header) {
        $this->headers[] = $header;
    }
    
    /**
     * add row to gridview
     * @param array row
     * @return void
     */
    public function add($row,$rowinfo = array()) {
        $this->rows[] = $row;
        $this->rowsinfo[] = $rowinfo;
    }
    
    /**
     * prepare grid, set start - stop row, paging, etc
     * @return void
     */
    protected function prepare_grid() {
        // tricky total_rows, in dbgridview these was set on get_data() function
        $this->total_rows = isset($this->total_rows)? $this->total_rows : count($this->rows);
    	
    	if ($this->is_display_all_rows) {
    	    // all row displayed, no need for paging
    	    $maxpage = 1;
    	    $page = 1;
    	    $rowidxstart = 0;
            $rowidxstop  = $this->total_rows;
    	}
    	else {
    	    // not all row displayed, use paging
    	    $maxpage = floor(abs($this->total_rows -1) / $this->displayed_rows) + 1;
    	    if (isset($_GET['page'.$this->name])) {
    			// get page from url
    			$page = $_GET['page'.$this->name];
    			// check min
    			$page = $page < 1? 1 : floor($page);
    			// check max
    			
    			$page = $page > $maxpage? $maxpage : $page;
    		}
    		else {
    		    $page = 1;
    		}
    		$rowidxstart = ($page - 1) * $this->displayed_rows;
            $rowidxstop  = $page * $this->displayed_rows <= $this->total_rows? $page * $this->displayed_rows : $this->total_rows;
    	}
    	$this->start = $rowidxstart;
    	$this->end = $rowidxstop;
    	$this->page = $page;
    	$this->maxpage = $maxpage;
    }
    
    /**
     * get html table header
     * @return string html
     */
    protected function get_html_header() {
        $buffer = "<thead>";
        foreach ($this->headers as $header) {
            $buffer .= "\n<tr>";
            foreach ($header as $key => $value) {
                //check if header has html attributes
			    //if key is integer(generated by php), then header dont have attributes
                if (is_integer($key)) {	//no attributes
    				// so caption = value
    			    $buffer .= "\n\t <th>$value</th>";
    			}else {	//header with attributes
    				// so caption = key, attribute = value
    				$buffer .= "\n\t <th $value >$key</th>";
    			};
            }
            $buffer .= "\n</tr>";
        }
        $buffer .= "</thead>";
        return $buffer;
    }
    /**
     * get the html navigation link / pagination
     * @return string nav link
     */
    public function get_html_navlink() {
        $buffer = "";
        // FIRST
        if ($this->page == 1) {
        	$buffer .= "<i class='fa fa-fast-backward'></i> First ";
        }
        else {
        	$buffer .= "<a href='".$this->gridurl(1)."'><i class='fa fa-fast-backward''></i> First</a> ";
        }
        // PREVIOUS
        if ($this->page == 1) {
        	$buffer .= "<i class='fa fa-backward'></i> Previous ";
        }
        else {
        	$buffer .= "<a href='".$this->gridurl($this->page -1)."'><i class='fa fa-backward'></i> Previous</a> ";
        }
        
        // ITEM COUNTS
        $buffer .= " ( ".($this->total_rows > 0? $this->start + 1 : 0)." - $this->end of $this->total_rows ) ";
        
        // NEXT
        if ($this->page < $this->maxpage) {
        	$buffer .= "<a href='".$this->gridurl($this->page +1)."'><i class='fa fa-foward'></i> Next</a> ";
        }
        else {
        	$buffer .= "Next <i class='fa fa-forward'></i> ";
        }
        // LAST
        if ($this->page < $this->maxpage) {
        	$buffer .= "<a href='".$this->gridurl($this->maxpage)."'>Last <i class='fa fa-fast-forward'></i></a> ";
        }
        else {
        	$buffer .= "Last  <i class='fa fa-fast-forward'></i> ";
        }
        return $buffer;
    }

    /**
     * get all row in html
     * @return string rows
     */
    protected function get_html_row() {
        $buffer = "<tbody>";
        $flip = 1;
        for ($i = $this->start; $i < $this->end; $i++) {
            if ($flip){ 
    			$trClass = '';
    			$flip = 0;
    		}else {
    			$trClass = '';
    			$flip = 1;
    		}
    		$buffer .= "\n<tr $trClass>";
    		foreach ($this->rows[$i] as $key => $val) {
    		    if (@$this->rowsinfo[$i]["rowtype"] == "th")
    		        $rowtype = "th";
    		    else
           		    $rowtype = "td";
    		    if (is_integer($key))
			        $buffer .= "\n\t <$rowtype>$val</$rowtype>";
			    else 
			        $buffer .= "\n\t <$rowtype $val>$key</$rowtype>";
    		}
    		$buffer .= "\n</tr>";
        }
        $buffer .= "</tbody>";
        return $buffer;
    }
    
    /**
     * get the grid output in html
     * @param string grid mode, default is html
     * @return mixed string for html, binary for pdf / excel
     */
    public function get() {
        switch ($_GET["x2mode"]) {
            case "xls" :
                $options = $_GET["xlsopt"];
                $this->generate_excel("xls",$options);
                break;
            case "xlsx" :
                $options = $_GET["xlsopt"];
                $this->generate_excel("xlsx",$options);
                break;
            /*
            case "pdf" :
                break;*/
                
            case "html" :
            default :
                $this->prepare_grid();
                $output = "<table class='table table-bordered table-striped table-hover table-condensed'>
                    ".($this->is_display_header? $this->get_html_header() : '')
                    .$this->get_html_row()
                    ."</table>"
                    .($this->is_display_links?
                        "<div class='gv-navi pull-right'>".$this->get_html_navlink()."</div>" : ""
                    ).
                    "</div>"
                ;
                return $output;
                break;
        }
    }

    /**
     * @param  $type type of url, 1 : first, 2:prev, 3:next, 4:last
     * @return string url
     */
    public function get_url($type) {
        switch ($type) {
            case 1 :
                if ($this->page == 1) {
                    return "";
                }
                else {
                    return $this->gridurl(1);
                }
                break;
            case 2 :
                if ($this->page == 1) {
                    return "";
                }
                else {
                    return $this->gridurl($this->page -1);
                }
                break;
            case 3 :
                if ($this->page < $this->maxpage) {
                    return $this->gridurl($this->page +1);
                }
                else {
                    return "";
                }
                break;
            case 4 :
                if ($this->page < $this->maxpage) {
                    return $this->gridurl($this->maxpage);
                }
                else {
                    return "";
                }
                break;
        }
        return "";
    }
    
    protected function sanitize_url($string, $force_lowercase = true, $anal = false) {
        $strip = array("~", "`", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "=", "+", "[", "{", "]",
                       "}", "\\", "|", ";", ":", "\"", "'", "&#8216;", "&#8217;", "&#8220;", "&#8221;", "&#8211;", "&#8212;",
                       "—", "–", ",", "<", ".", ">", "/", "?");
        $clean = trim(str_replace($strip, "", strip_tags($string)));
        $clean = preg_replace('/\s+/', "-", $clean);
        $clean = ($anal) ? preg_replace("/[^a-zA-Z0-9]/", "", $clean) : $clean ;
        return ($force_lowercase) ?
            (function_exists('mb_strtolower')) ?
                mb_strtolower($clean, 'UTF-8') :
                strtolower($clean) :
            $clean;
    }

    /**
     * get the grid url, these function to help constructing navigation link
     * @param string override page number
     * @return void
     */
    protected function gridurl($newpage) {
    	
    	$url = "";
    	if (count($_GET) > 0) {
    	    $first = true;
    	    $pagekeyexist = false;
    	    foreach ($_GET as $key => $val) {
    	        if ($key == "page".$this->name) {
    	            $val = $newpage; 
    	            $pagekeyexist = true;
    	        }
    	        $key = $this->sanitize_url($key);
    	        $url .= ($first? "?" : "&")."$key=$val";
    	        $first = false;
    	    }
    	    if (!$pagekeyexist)
    	        $url .= "&page$this->name=$newpage";
    	}
    	else $url = "?page$this->name=$newpage";
    	
        return $url;
    }


    /**
     * generate excel based on data
     * @return void
     */
    protected function generate_excel($type,$options = null) {
        include_once Kohana::find_file('vendor','PHPExcel');
        // pre-started
        // parse options
        if ($options != null) {
            $arropt = explode("::",$options);
            foreach ($arropt as $opt) {
                list($key,$val) = explode(":",$opt);
                $ref[$key] = $val;
            }
        }

        if ($ref["multi"] == "yes") {
            $xlssheetno = Leafx2::get("xlssheetno") == null? 0 : Leafx2::get("xlssheetno");
            $xlstotalsheet = $ref["sheets"];
            if ($xlssheetno > 0) {
                $objPHPExcel = Leafx2::get("xlsobj");
                $objPHPExcel->addSheet(new PHPExcel_Worksheet($objPHPExcel,"sheet".$xlssheetno));
            }
            else {
                $objPHPExcel = new PHPExcel();
                $objPHPExcel->getProperties()->setCreator("Leafx2 Framework")
                    ->setLastModifiedBy("Leafx2 Framework")
                    ->setTitle("Leafx2 Excel Document")
                    ->setSubject("none")
                    ->setDescription("none")
                    ->setKeywords("office excel")
                    ->setCategory("none");
            }
            if (isset($ref["fcolcrr".$xlssheetno])) $ref["fcolcrr"] = explode(",",$ref["fcolcrr".$xlssheetno]);
            else $ref["fcolcrr"] = array();
            if (isset($ref["fcoltxt".$xlssheetno])) $ref["fcoltxt"] = explode(",",$ref["fcoltxt".$xlssheetno]);
            else $ref["fcoltxt"] = array();
        }
        else {
            if (isset($ref["fcolcrr"])) $ref["fcolcrr"] = explode(",",$ref["fcolcrr"]);
            else $ref["fcolcrr"] = array();
            if (isset($ref["fcoltxt"])) $ref["fcoltxt"] = explode(",",$ref["fcoltxt"]);
            else $ref["fcoltxt"] = array();
            $xlssheetno = 0;

            $objPHPExcel = new PHPExcel();
            $objPHPExcel->getProperties()->setCreator("Leafx2 Framework")
                ->setLastModifiedBy("Leafx2 Framework")
                ->setTitle("Leafx2 Excel Document")
                ->setSubject("none")
                ->setDescription("none")
                ->setKeywords("office excel")
                ->setCategory("none");
        }

        // RUN
        // Add some data

        $objPHPExcel->setActiveSheetIndex($xlssheetno);
        // write header
        $skipcells = array();
        $i = 1;
        foreach ($this->headers as $header) {
            $rowidx = $i + 1;
            $colidx = 1;
            $colskip = 0;
            foreach ($header as $key => $val) {
                $coltoskip = 0;
                // in skipped array
                while (in_array(($colidx + $colskip).":".($rowidx),$skipcells)) {
                    $colidx++;
                }

                if (is_integer($key)) {	//no attributes
                    $write = $val;
    			}
    			else {
    			    $write = $key;
			        // check colspan
			        preg_match("/colspan=['\"]([0-9]+)['\"]+/",$val,$res);
			        if (is_numeric($res[1]) && $res[1] > 0) $coltoskip = $res[1] -1;
			        // check rowspan
			        preg_match("/rowspan=['\"]([0-9]+)['\"]+/",$val,$res);
			        if (is_numeric($res[1]) && $res[1] > 0) {
			            for ($j = 0; $j < ($res[1] -1); $j++) {
			                $skipcells[] = ($colidx + $colskip).":".($rowidx + $j + 1);
			            }
			        }
    			};
    			$write = strip_tags($write);
			    $write = $write == "&nbsp;"? "" : $write;

			    // write
			    $objPHPExcel->getActiveSheet()
			        ->setCellValue($this->get_excel_cellcode($colidx + $colskip,$rowidx), $write);
			    $objPHPExcel->getActiveSheet()
			        ->getStyle($this->get_excel_cellcode($colidx + $colskip,$rowidx))
			        ->getFont()
			        ->setBold(true);
    		    $objPHPExcel->getActiveSheet()
    		        ->getStyle($this->get_excel_cellcode($colidx + $colskip,$rowidx))
    		        ->getFont()
    		        ->setSize(12);

    		    $colskip += $coltoskip;
			    $colidx++;
            }
            $i++;
        }

        // write rows


        foreach ($this->rows as $row) {
            $rowidx = $i + 1;
            $colidx = 1;
            $colskip = 0;
    		foreach ($row as $key => $val) {
    		    if (is_integer($key)) {
    		        $write = $val;
                }
			    else {
			        $write = $key;
			        // check colspan
			        preg_match("/colspan=['\"]([0-9]+)['\"]+/",$val,$res);
			        if (is_numeric($res[1]) && $res[1] > 0) $colskip += $res[1] -1;
                }
			    $write = strip_tags($write);
			    $write = $write == "&nbsp;"? "" : $write;

			    // check currency
			    if (in_array($colidx + $colskip,$ref["fcolcrr"]) || $ref["fallcrr"] == "1")
			        if (preg_match("/^([0-9]{1,3}\.([0-9]{3}\.)*[0-9]{3}|[0-9]+)(,[0-9][0-9])?$/",$write)) {
                        $write = str_replace(".","",$write);
                        $write = str_replace(",",".",$write);
			        }

			    // need to format as text, set value explicitly
			    if (in_array($colidx + $colskip,$ref["fcoltxt"])) {
			        $objPHPExcel->getActiveSheet()
                        ->getStyle($this->get_excel_cellcode($colidx + $colskip,$rowidx))
                        ->getNumberFormat()
                        ->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
                    $objPHPExcel->getActiveSheet()
                        ->setCellValueExplicit($this->get_excel_cellcode($colidx + $colskip,$rowidx),$write);
			    }
			    else {
			        // write
                    $objPHPExcel->getActiveSheet()
                        ->setCellValue($this->get_excel_cellcode($colidx + $colskip,$rowidx), $write);
                }

			    $colidx++;
    		}
    		$i++;
        }

        // Rename worksheet
        // $objPHPExcel->getActiveSheet()->setTitle('Simple');



        if ($ref["multi"] == "yes" && $xlssheetno < ($ref["sheets"] -1)) {
            $xlssheetno++;
            Leafx2::register("xlssheetno",$xlssheetno);
            Leafx2::register("xlsobj",$objPHPExcel);
        }
        else {
            // clean up register
            Leafx2::register("xlssheetno",null);
            Leafx2::register("xlsobj",null);
            // clean up any code / output before
            @ob_end_clean();

            // prepare header output
            $resp = Kohana_Response::factory();
            // output according to type
            switch ($type) {
                case "xlsx" :
                    $resp->headers("Content-Type","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                    $resp->headers('Content-Disposition','attachment;filename="'.$this->name.'.xlsx"');
                    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
                    break;
                case "xls" :
                default :
                    $resp->headers("Content-Type","application/vnd.ms-excel");
                    $resp->headers('Content-Disposition','attachment;filename="'.$this->name.'.xls"');
                    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
            }
            $resp->headers('Cache-Control','max-age=0');
            // sending header
            $resp->send_headers();
            // set the output
            Leafx2::$output = Leafx2::OUTPUT_NONE;
            // write to stream
            $objWriter->save('php://output');
            exit;
        }
    }

    /**
     * override string representation of class to get grid
     * @return string html
     */
    public function __toString() {
        return $this->get();
    }
    
    /**
     * print html grid to stdout
     * @param string mode
     * @return void
     */
    public function display($mode = "html") {
        echo $this->get();
    }

    /**
     * @param  $colidx column
     * @param  $rowidx row
     * @return string
     */
    protected function get_excel_cellcode($colidx, $rowidx) {
        if ($colidx <= 26) {
            $ret = chr($colidx + 64).$rowidx;
        }
        else {
            $pref = chr(floor(($colidx -1) / 26) + 64);
            $sec = chr($colidx - (26 * floor(($colidx -1) / 26)) + 64);
            $ret = $pref.$sec.$rowidx;
        }
        return $ret;
    }

    protected function get_excel_colcode($colidx) {
        if ($colidx <= 26) {
            $ret = chr($colidx + 64);
        }
        else {
            $pref = chr(floor(($colidx -1) / 26) + 64);
            $sec = chr($colidx - (26 * floor(($colidx -1) / 26)) + 64);
            $ret = $pref.$sec;
        }
        return $ret;
    }

} // End 
    